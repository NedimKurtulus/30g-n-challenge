ilk index 0
[2:5] 2 den başlar 2 dahil 5 e kadar 5 dahil değil
[2:] 2 den başlar 2 dahil en son index e kadar gider
indexin içine len fonksiyonu sokabilirsin zaten int döndürür
strip boşluklara göre ayırır
split default olarak hem baştaki hem sondaki hem de içerdeki boşlukları görmezden gelip ayırır
splitin içine neye gore ayıracağını koyabilirsin
arraylari eşittirle kopyalayamazsın sadece adres yerinde aynı kısımda tulmasını sağlarsa böylelikle aynı array olmuş ollurlar.
array yedeği .copy() ile alınır
array extend ya da appen ile geliştirilir [bir sonraki index] taktiği işe yaramaz
liste içinde tuple , tuple içinde liste tanımlanabilir.
listenin içine de tuple ın içine de farklı veri yapıları girebilir.
tuple lar sadece okjunabilir  , onları değiştiremezsin.
tuple ların performansı daha yüksek.
mesela index kısmına -2 yazarsan sondan ikinci indexte ne varsa onu verir.
tupılda index virgülle döner bu tuple olduğunu bellemek içindir.
bir tuple olduğunu programa anlatmak için içine soktuğunuz değerden sonra virgül çakmalısınız.
tuple parantezler içine yazılır içine array sokacaksan parantezle sokarsın.
tuple içine boş deger [] ile sokulur.
listelere [] bu değer içine yazarsın.
liste içine array [] bununla konulur
liste içine boş eleman () ile sokulur.
setler kıvırcık parantezle yazılır.
setleri yazdırmaya kalktığınızda rastgle yazar bu onun listelerde daha iyi performans göstermesine sebep olur.
setlerde indeki elemanları bulmak için döngülerden faydalanır.
sete eleman eklenebilir ama eleman değiştirilemez.
setlerde add() le tek eleman update() le birden fazla eleman koyabilirsin update kullanacaksan liste içine sokup yap tek eleman değil birden fazla eleman çakar.
setlerde remove() la silebilirsin ama eleman yoksa hata verir.Bunun yerine discard() kullanırsan hata vermez.
setlerde pop() kullanma rasgele patlatıyor.
setlerde clean() hepsini temizliyor
setlerde del kullanırsan direk tanımlanan seti hafıza dan siliyor.
set() fonkisyonuylada set oluşturabilirsin.
set .union() ile birleşim yapılır.
set .intersaction() ile kesişim yapılır.
set .difference() ile farklarını bulursun iki setin yeri değişirse farklı sonuçlar verir.
set .symmetric_difference() is kesişimin verdiği kısmın haricini verir.
dictionary için parentez aç içine .ict tırnaklarla elemanı karşına : koyduktan sonra karşılıiını yaz.
dict() fonksiyonu ile de dictionary oluşturulabilir.
python da blokalar bir kez tab tuşuna basmışçasına bir içeri girintiyle gösterilir.
eşit midir sorusu == ile gösterilir
for döngüsünde for la in arası kısımda olan isim bizim elemanlara verdiğimiz bir değişken ,herşey olabilir.
!= farklıysa demek.
